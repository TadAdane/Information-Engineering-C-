#include <iostream>
#include <string>
#include <cmath>
#include <cstring>

using namespace std;

int Question1(float x, float y, float z){ //Harmonic Mean
    int n = 3;
    float sum = 0;
    float arr[3] = {x, y, z};
    
    for (int i = 0; i < n; i++) // Loop for getting harmonic sum
    sum = sum + (float)1 / arr[i];
    
	float mean = n / sum;
	return mean;
}
int Question2(int x, int y){// Greatest Common factor
    int c;
    c = x%y;//remainder of the two values
    x = y;
    y = c;
    if (y == 0)
        return x;
    return Question2(x, y);
}
int Question3(int x, int y, int z){ //Greatest common factor for 3 numbers
    int d, e, f; // First find for the two numbers then find the GCD for the GCD of the two and the third number.
    d = x%y;
    x = y;
    y = d;
    if (y == 0){
        f = x;
        return x;
        }
        e = z%f;
        z = f;
        f = e;
        if (f == 0){
        return z;
        }
        //else{
          //  cout << 1 << endl;
        //}
    return Question3(x, y, z);
}
void Question4(char* arr, int x){
       int i = 0;
    int j = 25;
    do{ //Loop for accessing each value of the small letter string input
        int e = (int)arr[i];
        int c = (e - 97)*2;
        int d = (122 - e)*2;
        for (j; j > 0; j--){// loop for exchanging each value of string input and decrease value ascii code.
            
            if (e <= 109){// Condition for when the letter is below the middle letter(m or n)
                if (e == 32){// Condition for space
                cout << " ";
                }else{
                int a = e + (j - c); //Add value of 25 minus the value of how much the current value is farther from 'a'.
                cout << (char)a; //Print the cyphered key
                }
                i++; // Increment i to access every key after each run.
                break;
               
            }else if (e >= 110){// Condition for when the letter is above the middle letter(m or n)
                int a = e - (j - d); //substract value of 25 minus the value of how much the current value is farther from 'z'.
                cout << (char)a; //Print the cyphered key
                i++; // Increment i to access every key after each run.
                break;
            }
        }
    }while(i < x);
}

void run_question4(){
    string cypher_string;
    cout << "Please enter string with small letters to get encrypted form"<< endl;
    cin.ignore();
    getline (cin, cypher_string); // must always be immediately after the declared string... has some complications!
    
    int cypher_length = cypher_string.length();
    
    char cypher_input[cypher_length + 1];
    
    strcpy(cypher_input, cypher_string.c_str()); //Copy String to Character array.
    
    Question4(cypher_input, cypher_length);
}

int Exercise1(int x, int y){ //Code to get minimum value
  int min_value = min(x, y);
  cout << "Minimum is: ";
  return min_value;
}

int Exercise2(int x, int y, int z, int w){ //Minimum value or three numbers

  int result_1 = min(x, y);// get the minimum of the two and compare it with the third
  int result_2 = min(result_1, z);
  int result_3 = min(result_2, w);
  cout << "Minimum is: " << endl;
  return result_3;
}

void Exercise3(int x, int y, int z){ //Geometric_mean

  float product = x*y*z;

  float Geometric_mean = pow(product, (float)1/3);
  cout << Geometric_mean;
}

void Exercise4(int x){ //Get the round number... used round built-in function

    cout << round(x) << endl;

}

void Exercise5(int x){
    
    int minN = 0, maxN = 100, e, f, d;

    for (e = minN; e <= maxN; e++) {//Condition for 0 and 1
           if (e == 1 || e == 0)
            continue;
           for (f = 2; f <= e / 2; ++f) {//if remainder is 0 then is divisible hence has factor other than 1
                if (e % f == 0) {
                    d = 0;
                    break;
                }
                else if (e % f != 0){ //if no number lessthan value doesn't have a remainder 0, then the only factors are 1 and itself
                    d = 1;
                }
            }
        if (d == 1){
            if (x == e){
                cout << "True\n";
            }
        }

    }
}
void Exercise6(int x){//Computing area and volume of sphere


    float pi = 3.14159;//value of pi

    float volume;
    volume = (float(4) / float(3))*pi*x*x*x;
    cout << volume << endl;

    float area;
    area = 4*pi*x*x;
    cout << area;
}
void HomeWork()
{

    int num1, num2, num3, num4;

    char Exercise;
    char x;

    do
        {
    cout << "\nChoose an option:" << endl;
    cout << "Press 1 for Exercise 1" << endl;
    cout << "Press 2 for Exercise 2" << endl;
    cout << "Press 3 for Exercise 3" << endl;
    cout << "Press 4 for Exercise 4" << endl;
    cout << "Press 5 for Exercise 5" << endl;
    cout << "Press 6 for Exercise 6" << endl;
    cout << "Press x for Exit" << endl;
    cin >> Exercise;

    switch (Exercise){

    case '1':
            cout << "Please inter two numbers to get minimum number"<< endl;
            cin >> num1;
            cin >> num2;
            cout << Exercise1(num1, num2);
            break;
      case '2':
          cout << "Please inter four numbers to get minimum number"<< endl;
        cin >> num1;
        cin >> num2;
        cin >> num3;
        cin >> num4;
        cout << Exercise2(num1, num2, num3, num4);
        break;
     case '3':
        cout << "Please enter three numbers to get their Geometric Sum"<< endl;
        int num7, num8, num9;
        cin >> num7;
        cin >> num8;
        cin >> num9;
        Exercise3(num7, num8, num9);
        break;
     case '4':
        cout << "Please enter the number to round it"<<endl;
        float round_number;
        cin >> round_number;
        Exercise4(round_number);
        break;
     case '5':
        int is_prime;
        cout << "Please enter number to know if it's a prime or not" << endl;
        cin >> is_prime;
        Exercise5(is_prime);
        break;
     case '6':
        cout << "Please enter the radius of the sphere to get area and volume\n";
        int r;
        cin >> r;
        Exercise6(r);
        break;
     case 'x':
           goto exit_loop;
           break;
     default:
           cout << "Invalid option";
           break;
    }
    }while (Exercise);

    exit_loop:;
}

void Assignment()
{
    float arr[3];
	int n;
    int num1, num2, num3, num4;

       int intx;
    char x, Exercise;
    intx = (int)x;


    do
        {
    cout << "\nChoose an option:" << endl;
    cout << "Press 1 for Exercise 1" << endl;
    cout << "Press 2 for Exercise 2" << endl;
    cout << "Press 3 for Exercise 3" << endl;
    cout << "Press 4 for Exercise 4" << endl;
    cout << "Press x for Exit" << endl;
    cin >> Exercise;

    switch (Exercise){

        case '1':
            cout << "Please enter 3 numbers to get their harmonic mean\n";
            cin >> num1 >> num2 >> num3;
            cout << "There harmonic mean is: " << Question1(num1, num2, num3);
        break;

        case '2':
            cout << "Please Enter two numbers to get GCD values of the numbers\n";
            cin >> num1;
            cin >> num2;
            cout << "GCD = " << Question2(num1, num2);
            break;

        case '3':
            cout << "Please enter 3 numbers to get GCD values of the numbers\n";
            cin >> num1 >> num2 >> num3;
            cout << "GCD = " << Question3(num1, num2, num3);
            break;

        case '4':
            run_question4();
            break;
        case 'x':
        goto exit_loop; //Skip line code to exit_loop;
        break;
        default:
        cout << "Invalid option";
    }
    }while (Exercise);
    exit_loop: ;
}

int main()
{

    
    char type;
    
    do{
    cout << "1 - For HomeWork\n2 - For Assignment\nX - exit"<< endl;
    cin >> type;

    switch(type){
        case '1':
           HomeWork();
           break;
        case '2':
           Assignment();
           break;
        case 'x':
        goto exit_loop; //Skip line to exit_loop to exit the switch case
           break;
    }
  
    }while(type);
    exit_loop: ;
    

    return 0;
}


