#include <iostream>
#include <cmath>
#include <iomanip> // for setprecision
#include <string> // for substr() substring
#include <cstring> // for strcpy
using namespace std;

//void choice();


void Exercise1(){

     float random_integer;
     float random_array [20];

     srand(time(NULL));  // for random_integer to generate different integers at every run

     cout << "The array is: ";
     for (int i = 0; i < 20; i++){ // Loop for filling up integers

         //static_cast: for declaring type (to change from int to float)
         random_integer = 10.0 + static_cast <float> (rand()) / (static_cast <float> (RAND_MAX/(100.0-10.0))); // Generate random random integer

         random_array[i] = {random_integer};
         cout << setprecision(3) << random_array[i]<<" "; // set precision (3): 3 significant numbers
       }


// Loop for insertion sorting
 for (int i = 1; i < 20; i++) {

    float k = random_array[i]; // Get each array value as k
    int j = i - 1;

    for (j; k < random_array[j] && j >= 0; --j) { // Loop for sorting, run when k (random_array[i]) is less than random_array[j]
         random_array[j + 1] = random_array[j]; // exchange array
        }
    random_array[j + 1] = k; // random_array[j + 1] becomes the random_array[j] in loop
  }

 cout << "\nThe sorted array is: ";

 for (int i = 0; i < 20; i++) // Loop for printing array
    cout << random_array[i] << " " ;


}

void Exercise2(){
    int binary_array[19];
    int random_integer;

    srand(time(NULL));
    cout << "The array is: ";
    for (int i = 0; i < 20; i++){ // Loop for filling up integers


         random_integer = 10.0 + rand() % 100; // Generate random random integer

         binary_array[i] = {random_integer};

      }

      // Bubble sort for array

    for (int x = 0; x < 20; x++){
        for (int j = 0; j < 20 ; j++){
            if (binary_array[j] > binary_array[j + 1]){
                swap(binary_array[j], binary_array[j + 1]);
            }

        }
    }
    // print array
    for (int x = 1; x < 20; x++){
        cout << binary_array[x] <<" ";
    }

    int low = 0;
    int high = 19;

    cout << "\nPlease enter number you want find" <<endl;
    int binary_number;
    cin >> binary_number;

    //Loop for Binary sort
     while (high - low > 1) {
		int mid = (high + low) / 2;
		if (binary_array[mid] < binary_number) {
			low = mid + 1;
		}
		else {
			high = mid;
		}
    // Condition for binary sorting
	}
	if (binary_array[low] == binary_number) {
		cout << "Is located at array: " << low << endl;
	}
	else if (binary_array[high] == binary_number) {
		cout << "Is located at array: "<< high << endl;
	}
	else {
		cout << "Not Found" << endl;
	}
}
void Exercise3(){

    int reverse_size;
    string reverse_output = "";

    cout << "Input string to get the REVERSE output\n";

    string reverse_array;
    cin.ignore(); //Ignore previous input characters
    getline (cin, reverse_array);

    reverse_size = reverse_array.length();
    int j, k = reverse_size + 1;


    while(reverse_size >= 0){ // Loop for detecting " " character.
        if (reverse_array[reverse_size] == ' '){
            j = reverse_size + 1;

            while (j != k){ //Loop for exchanging words back to forward
            reverse_output += reverse_array[j++];
            }

            reverse_output += ' ';
            k = reverse_size;
        }
        --reverse_size;
    }
 	j = 0; // For re use of J

 	while (j != k) // Standard loop for output
 		reverse_output += reverse_array[j++];

 	cout << "The reverse output is: " <<reverse_output << endl;
}
void Exercise4(){

    cout << "Please enter string to get the WORD occurance" << endl;

    string occurance_string;
    cin.ignore();
    getline(cin, occurance_string);

    cout << "Enter WORD to get occurance" << endl;
	string occurance_word;

	cin >> occurance_word;

    bool flag = false;
	for (int i = 0; i < occurance_string.length(); i++) { // Loop for declaring substrings and count occurance of substring
		if (occurance_string.substr(i, occurance_word.length()) == occurance_word) {
			cout << i << " ";
			flag = true;
		}
	}

	if (flag == false) //Condition if the desired word isn't present
		cout << "Not Found";
}
void Exercise5(){

    cout << "Please Enter string to replace a specific word\n";
    string replace_array;
    cin.ignore();
    getline(cin , replace_array);

    cout << "Enter word you want to replace\n";

    string old_word;
    cin >> old_word;
    int i = old_word.length();// Length of old word, to be replaced

    cout << "Please enter new word\n";

    string new_word;// User entered word for replacement
    cin >> new_word;

    size_t pos = replace_array.find(old_word);// Locate old word position
    string new_array = replace_array.replace(pos, i, new_word);

    cout << new_array << endl;
}

int Ass_Exercise1(){

    cout << "PLease enter string to get capital letters" << endl;

    string input_word;
    cin.ignore();
    getline (cin, input_word);

    int i = input_word.length(); //get string character length

    char input_word_char[i];

    //Copying the string to the character array
    strcpy(input_word_char, input_word.c_str());

    for (int j = 0; j < i; j++){ // Loop for reading each character and updating them to be a capital letter ( in range of 65 - 90)
        int k = (int)input_word_char[j] - 32;

        if (k >= 65 && k <= 90){ // Condition for when a character other than small letters is inputed.
            cout << (char)k;
        }
        else if (k == 32){ // Condition for character " "
            cout << (char)k;
        }
        else {
            cout << input_word_char[j];
        }
    }
    return 0;
}

void Ass_Exercise2(){
    cin.ignore();
    cout << "Please enter number of values you want to input\n(for declaration of size of array)\n"; // Couldn't declare an array with variable size
    int input_number, size_number;
    double sum_array = 0;
    double average_array;

    cin >> size_number; // size of array given by user

    cout << "Please enter values to get minimal, maximal and mean of the values" << endl;

    int array_number[size_number]; // Declare array
    for (input_number = 0; input_number < size_number; ++input_number){ //loop to fill array
        cin >> array_number[input_number];
    }

    cout <<  "The array is ";

    for (int output_number = 0; output_number < size_number; ++output_number){ // loop to print array
        cout << array_number[output_number] << " ";

       sum_array += array_number[output_number]; // Sumation of values of array
    }


    cout << "\nSum = " << sum_array << endl;

    average_array = sum_array / size_number; // Average of values of array
    cout << "Average = " << average_array << endl;

// Bubble sorting to get maximal and minimal value of array
    for (int x = 0; x < size_number; x++){
        for (int j = 0; j < size_number ; j++){
            if (array_number[j] > array_number[j + 1]){
                swap(array_number[j], array_number[j + 1]);
            }

        }
    }

    cout << "\nThe minimal value is " << array_number[0] << endl;
    cout << "The maximal value is " << array_number[size_number - 1] << endl;

}

void Ass_Exercise3(){
    cout << "Please enter a string to get specific number of LETTER\n";
    string input_word;
    cin.ignore();
    getline (cin, input_word);

    int i = input_word.length();

    char input_word_char[i];
    int sort_array[i];

    cout << "Please enter the LETTER you want to get number of occurance\n";

    char occurance;
    cin >> occurance; // User input the letter desired to get occurance value
    int count = 0;


    strcpy(input_word_char, input_word.c_str()); //Copying the string to the character array

    for (int j = 0; j < i; j++){
        int k = (int)input_word_char[j];

        if (k == (int)occurance){ // increase count by 1 is the desired letter is detected in the array
           count++;
        }
        sort_array[j] = (int)input_word_char[j];


    }


    cout << "The letter " << occurance << " occurs "<< count <<" times"<< endl;

    //Bubble sorting in ASCII order for alphabetical order.

    for (int x = 0; x < i; x++){
        for (int j = 0; j < i ; j++){
            if (sort_array[j] > sort_array[j + 1]){
                swap(sort_array[j], sort_array[j + 1]);
            }

        }


    }

    cout << "The alphabetical order of the letters in the string is: ";
    for (int n = 0; n < i+1; n++){ // Standard loop for output of array
        cout << (char)sort_array[n] << " ";
    }

}
void HomeWork(){
    int intx;
    char x, Exercise;
    intx = (int)x;
    

    do
        {
    cout << "\nChoose an option:" << endl;
    cout << "Press 1 for Exercise 1" << endl;
    cout << "Press 2 for Exercise 2" << endl;
    cout << "Press 3 for Exercise 3" << endl;
    cout << "Press 4 for Exercise 4" << endl;
    cout << "Press 5 for Exercise 5" << endl;
    cout << "Press x for Exit" << endl;
    cin >> Exercise;

    switch (Exercise){
        case '1':
           Exercise1();
           break;
        case '2':
           Exercise2();
           break;
        case '3':
           Exercise3();
           break;
        case '4':
           Exercise4();
           break;
        case '5':
           Exercise5();
           break;
        case 'x':
           goto exit_loop;
           break;
        default:
           cout << "Invalid option";
           break;
    }
    }while (Exercise);
    exit_loop: ;
}

void Assignment(){
    int intx;
    char x, Exercise;
    intx = (int)x;
    

    do
        {
    cout << "\nChoose an option:" << endl;
    cout << "Press 1 for Exercise 1" << endl;
    cout << "Press 2 for Exercise 2" << endl;
    cout << "Press 3 for Exercise 3" << endl;
    cout << "Press x for Exit" << endl;
    cin >> Exercise;

    switch (Exercise){
        case '1':
        Ass_Exercise1();
        break;
        case '2':
        Ass_Exercise2();
        break;
        case '3':
        Ass_Exercise3();
        break;
        // case 'x':
        // goto exit_loop; //Skip line code to exit_loop;
        // break;
        // default:
        // cout << "Invalid option";
    }
    }while (Exercise != 'x');
    exit_loop: ;
}


int main()
{

    
    char type;
    
    do{
    cout << "1 - For HomeWork\n2 - For Assignment\nX - exit"<< endl;
    cin >> type;

    switch(type){
        case '1':
           HomeWork();
           break;
        case '2':
           Assignment();
           break;
        // case 'x':
        // goto exit_loop; //Skip line to exit_loop to exit the switch case
        //   break;
    }
  
    }while(type != 'x');
    exit_loop: ;
    

    return 0;
}
